CSP₀ library
============

I'll write more detailed notes later.  For now, to compile this
package, you need several tools:


To build the source code:
  • cmake
  • bison
  • Boost
  • libjudy

To generate the documentation:
  • pandoc

It's highly recommended that you perform an out-of-source build.
Decide on values for the following:

  SRC_DIR:   the top-level “hst” source directory.

  BUILD_DIR: the directory where you will perform the build.  (It's
             fine if this is a subdirectory of ${SRC_DIR}).

  PREFIX:    the filesystem directory that you want to install into.
             This will usually be /usr, /usr/local, ${HOME}, or
             something similar.

Then execute the following:

  mkdir ${BUILD_DIR}
  cd ${BUILD_DIR}
  cmake \
    -D CMAKE_BUILD_TYPE:string=RELEASE \
    -D CMAKE_INSTALL_PREFIX:string=${PREFIX} \
    ${SRC_DIR}
  make
  make doc
  make test
  sudo make install

(You'll obviously only need the “sudo” if you're installing into a
system-wide directory.)


CSPM library
============

To compile the CSPM, you'll need a Haskell compiler and several
libraries.  So far we've only tested this on GHC 6.8.  If you can get
it to compile using other compilers or GHC versions, we'd love to hear
it!

You'll also need the happy parser generator, and the following
Hackage/Cabal packages:

  • array
  • base
  • containers
  • mtl
  • QuickCheck

These should all be preinstalled for any reasonably recent Haskell
compiler.

The cspm directory contains a Cabal package description, so you can
use the usual Cabal recipe for compiling and installing the CSPM
portion of the library:

  runghc Setup.lhs configure
  runghc Setup.lhs build
  runghc Setup.lhs test
  sudo runghc Setup.lhs install

(substituting “runghc” with “runhaskell” or “runhugs” or something
else if appropriate.)

As with the CSP₀ library, you'll only need the “sudo” if you're
installing into a system-wide directory.
